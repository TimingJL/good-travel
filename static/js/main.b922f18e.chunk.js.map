{"version":3,"sources":["components/SearchBar/index.js","components/GoogleMap/index.js","containers/MainPage/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","theme","root","padding","display","alignItems","width","input","marginLeft","spacing","flex","iconButton","divider","height","margin","SearchBar","classes","Paper","component","className","IconButton","aria-label","InputBase","placeholder","inputProps","type","Divider","orientation","color","MockGoogleMap","styled","div","GoogleMap","StyledSearchBar","container","position","MainPage","Container","maxWidth","disableGutters","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"iUAUMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,UACTC,QAAS,OACTC,WAAY,SACZC,MAAO,OAETC,MAAO,CACLC,WAAYP,EAAMQ,QAAQ,GAC1BC,KAAM,GAERC,WAAY,CACVR,QAAS,IAEXS,QAAS,CACPC,OAAQ,GACRC,OAAQ,OAoCGC,EAhCG,WAChB,IAAMC,EAAUjB,IAEhB,OACE,kBAACkB,EAAA,EAAD,CAAOC,UAAU,OAAOC,UAAWH,EAAQd,MACzC,kBAACkB,EAAA,EAAD,CAAYD,UAAWH,EAAQL,WAAYU,aAAW,QACpD,kBAAC,IAAD,OAEF,kBAACC,EAAA,EAAD,CACEH,UAAWH,EAAQT,MACnBgB,YAAY,qBACZC,WAAY,CAAE,aAAc,wBAE9B,kBAACJ,EAAA,EAAD,CACEK,KAAK,SACLN,UAAWH,EAAQL,WACnBU,aAAW,UAEX,kBAAC,IAAD,OAEF,kBAACK,EAAA,EAAD,CAASP,UAAWH,EAAQJ,QAASe,YAAY,aACjD,kBAACP,EAAA,EAAD,CACEQ,MAAM,UACNT,UAAWH,EAAQL,WACnBU,aAAW,cAEX,kBAAC,IAAD,SCrDFQ,EAAgBC,IAAOC,IAAV,8EAAGD,CAAH,gMAWJE,EAFG,kBAAM,kBAACH,EAAD,O,QCLlBI,EAAkBH,IAAOC,IAAV,gFAAGD,CAAH,uFAQf/B,EAAYC,aAAW,iBAAO,CAClCkC,UAAW,CACTC,SAAU,gBAkBCC,EAdE,WACf,IAAMpB,EAAUjB,IAChB,OACE,oCACE,kBAAC,EAAD,MACA,kBAACsC,EAAA,EAAD,CAAWC,SAAS,KAAKC,gBAAc,EAACpB,UAAWH,EAAQkB,WACzD,kBAACD,EAAD,KACE,kBAAC,EAAD,UCvBKO,EAFH,kBAAM,kBAAC,EAAD,OCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b922f18e.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport InputBase from \"@material-ui/core/InputBase\";\nimport Divider from \"@material-ui/core/Divider\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport MenuIcon from \"@material-ui/icons/Menu\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport DirectionsIcon from \"@material-ui/icons/Directions\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: \"2px 4px\",\n    display: \"flex\",\n    alignItems: \"center\",\n    width: \"90%\",\n  },\n  input: {\n    marginLeft: theme.spacing(1),\n    flex: 1,\n  },\n  iconButton: {\n    padding: 10,\n  },\n  divider: {\n    height: 28,\n    margin: 4,\n  },\n}));\n\nconst SearchBar = () => {\n  const classes = useStyles();\n\n  return (\n    <Paper component=\"form\" className={classes.root}>\n      <IconButton className={classes.iconButton} aria-label=\"menu\">\n        <MenuIcon />\n      </IconButton>\n      <InputBase\n        className={classes.input}\n        placeholder=\"Search Google Maps\"\n        inputProps={{ \"aria-label\": \"search google maps\" }}\n      />\n      <IconButton\n        type=\"submit\"\n        className={classes.iconButton}\n        aria-label=\"search\"\n      >\n        <SearchIcon />\n      </IconButton>\n      <Divider className={classes.divider} orientation=\"vertical\" />\n      <IconButton\n        color=\"primary\"\n        className={classes.iconButton}\n        aria-label=\"directions\"\n      >\n        <DirectionsIcon />\n      </IconButton>\n    </Paper>\n  );\n};\n\nexport default SearchBar;\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\n\nconst MockGoogleMap = styled.div`\n  background: url(\"https://images.chinatimes.com/newsphoto/2019-10-27/900/B13A00_P_06_02.jpg\");\n  background-size: contain;\n  background-position: center;\n  width: 100vw;\n  height: 100vh;\n  position: absolute;\n`;\n\nconst GoogleMap = () => <MockGoogleMap />;\n\nexport default GoogleMap;\n","import React from \"react\";\nimport styled from \"styled-components/macro\";\nimport SearchBar from \"components/SearchBar\";\nimport GoogleMap from \"components/GoogleMap\";\nimport Container from \"@material-ui/core/Container\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst StyledSearchBar = styled.div`\n  position: absolute;\n  display: flex;\n  justify-content: center;\n  margin: 12px 0px;\n  width: 100%;\n`;\n\nconst useStyles = makeStyles(() => ({\n  container: {\n    position: \"relative\",\n  },\n}));\n\nconst MainPage = () => {\n  const classes = useStyles();\n  return (\n    <>\n      <GoogleMap />\n      <Container maxWidth=\"sm\" disableGutters className={classes.container}>\n        <StyledSearchBar>\n          <SearchBar />\n        </StyledSearchBar>\n      </Container>\n    </>\n  );\n};\n\nexport default MainPage;\n","import React from \"react\";\nimport MainPage from \"containers/MainPage\";\n\nconst App = () => <MainPage />;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}